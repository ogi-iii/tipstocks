// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TipServiceClient is the client API for TipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TipServiceClient interface {
	CreateTip(ctx context.Context, in *CreateTipRequest, opts ...grpc.CallOption) (*CreateTipResponse, error)
	DeleteTip(ctx context.Context, in *DeleteTipRequest, opts ...grpc.CallOption) (*DeleteTipResponse, error)
	AllTips(ctx context.Context, in *AllTipsRequest, opts ...grpc.CallOption) (TipService_AllTipsClient, error)
	SearchTips(ctx context.Context, in *SearchTipsRequest, opts ...grpc.CallOption) (TipService_SearchTipsClient, error)
}

type tipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTipServiceClient(cc grpc.ClientConnInterface) TipServiceClient {
	return &tipServiceClient{cc}
}

func (c *tipServiceClient) CreateTip(ctx context.Context, in *CreateTipRequest, opts ...grpc.CallOption) (*CreateTipResponse, error) {
	out := new(CreateTipResponse)
	err := c.cc.Invoke(ctx, "/tip.TipService/CreateTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tipServiceClient) DeleteTip(ctx context.Context, in *DeleteTipRequest, opts ...grpc.CallOption) (*DeleteTipResponse, error) {
	out := new(DeleteTipResponse)
	err := c.cc.Invoke(ctx, "/tip.TipService/DeleteTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tipServiceClient) AllTips(ctx context.Context, in *AllTipsRequest, opts ...grpc.CallOption) (TipService_AllTipsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TipService_ServiceDesc.Streams[0], "/tip.TipService/AllTips", opts...)
	if err != nil {
		return nil, err
	}
	x := &tipServiceAllTipsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TipService_AllTipsClient interface {
	Recv() (*AllTipsResponse, error)
	grpc.ClientStream
}

type tipServiceAllTipsClient struct {
	grpc.ClientStream
}

func (x *tipServiceAllTipsClient) Recv() (*AllTipsResponse, error) {
	m := new(AllTipsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tipServiceClient) SearchTips(ctx context.Context, in *SearchTipsRequest, opts ...grpc.CallOption) (TipService_SearchTipsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TipService_ServiceDesc.Streams[1], "/tip.TipService/SearchTips", opts...)
	if err != nil {
		return nil, err
	}
	x := &tipServiceSearchTipsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TipService_SearchTipsClient interface {
	Recv() (*SearchTipsResponse, error)
	grpc.ClientStream
}

type tipServiceSearchTipsClient struct {
	grpc.ClientStream
}

func (x *tipServiceSearchTipsClient) Recv() (*SearchTipsResponse, error) {
	m := new(SearchTipsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TipServiceServer is the server API for TipService service.
// All implementations must embed UnimplementedTipServiceServer
// for forward compatibility
type TipServiceServer interface {
	CreateTip(context.Context, *CreateTipRequest) (*CreateTipResponse, error)
	DeleteTip(context.Context, *DeleteTipRequest) (*DeleteTipResponse, error)
	AllTips(*AllTipsRequest, TipService_AllTipsServer) error
	SearchTips(*SearchTipsRequest, TipService_SearchTipsServer) error
	mustEmbedUnimplementedTipServiceServer()
}

// UnimplementedTipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTipServiceServer struct {
}

func (UnimplementedTipServiceServer) CreateTip(context.Context, *CreateTipRequest) (*CreateTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTip not implemented")
}
func (UnimplementedTipServiceServer) DeleteTip(context.Context, *DeleteTipRequest) (*DeleteTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTip not implemented")
}
func (UnimplementedTipServiceServer) AllTips(*AllTipsRequest, TipService_AllTipsServer) error {
	return status.Errorf(codes.Unimplemented, "method AllTips not implemented")
}
func (UnimplementedTipServiceServer) SearchTips(*SearchTipsRequest, TipService_SearchTipsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchTips not implemented")
}
func (UnimplementedTipServiceServer) mustEmbedUnimplementedTipServiceServer() {}

// UnsafeTipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TipServiceServer will
// result in compilation errors.
type UnsafeTipServiceServer interface {
	mustEmbedUnimplementedTipServiceServer()
}

func RegisterTipServiceServer(s grpc.ServiceRegistrar, srv TipServiceServer) {
	s.RegisterService(&TipService_ServiceDesc, srv)
}

func _TipService_CreateTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TipServiceServer).CreateTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tip.TipService/CreateTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TipServiceServer).CreateTip(ctx, req.(*CreateTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TipService_DeleteTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TipServiceServer).DeleteTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tip.TipService/DeleteTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TipServiceServer).DeleteTip(ctx, req.(*DeleteTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TipService_AllTips_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AllTipsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TipServiceServer).AllTips(m, &tipServiceAllTipsServer{stream})
}

type TipService_AllTipsServer interface {
	Send(*AllTipsResponse) error
	grpc.ServerStream
}

type tipServiceAllTipsServer struct {
	grpc.ServerStream
}

func (x *tipServiceAllTipsServer) Send(m *AllTipsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TipService_SearchTips_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchTipsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TipServiceServer).SearchTips(m, &tipServiceSearchTipsServer{stream})
}

type TipService_SearchTipsServer interface {
	Send(*SearchTipsResponse) error
	grpc.ServerStream
}

type tipServiceSearchTipsServer struct {
	grpc.ServerStream
}

func (x *tipServiceSearchTipsServer) Send(m *SearchTipsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TipService_ServiceDesc is the grpc.ServiceDesc for TipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tip.TipService",
	HandlerType: (*TipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTip",
			Handler:    _TipService_CreateTip_Handler,
		},
		{
			MethodName: "DeleteTip",
			Handler:    _TipService_DeleteTip_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AllTips",
			Handler:       _TipService_AllTips_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchTips",
			Handler:       _TipService_SearchTips_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/protobuf/tip.proto",
}
